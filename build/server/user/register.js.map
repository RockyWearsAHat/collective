{"version":3,"file":"register.js","sources":["../../../server/user/register.ts"],"sourcesContent":["import connectToMongo from \"../../db/connectToMongo\";\nimport User, { IUser } from \"../../db/models/user\";\nimport { Request, Response, Router } from \"express\";\n\nconst router = Router();\n\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  const { username, password }: Partial<IUser> = req.body;\n\n  if (typeof username !== \"string\" || typeof password !== \"string\")\n    return res.json({ message: \"Username and password must be strings\" });\n\n  if (!username || !password || username.length == 0 || password.length == 0)\n    return res.json({ message: \"Username and password must not be empty\" });\n\n  await connectToMongo();\n  const newUser = await User.create({ username, password });\n\n  return res.json({\n    registerRes: newUser\n  });\n});\n\nexport default router;\n"],"names":[],"mappings":";;;;AAIA,MAAM,MAAM,GAAG,MAAM,GAAG;AAExB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,GAAY,EAAE,GAAa,KAAI;IACrD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAmB,GAAG,CAAC,IAAI,CAAC;IAExD,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ;QAC9D,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uCAAuC,EAAE,CAAC,CAAC;AAExE,IAAA,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC;QACxE,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,yCAAyC,EAAE,CAAC,CAAC;IAE1E,MAAM,cAAc,EAAE,CAAC;AACvB,IAAA,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;IAE1D,OAAO,GAAG,CAAC,IAAI,CAAC;AACd,QAAA,WAAW,EAAE,OAAO;AACrB,KAAA,CAAC,CAAC;AACL,CAAC,CAAC;;;;"}